#!/usr/bin/exec-suid -- /usr/bin/python3

import random
from Crypto.Util.number import long_to_bytes as l2b, bytes_to_long as b2l


class Sparrow:
    ROUNDS = 7
    BLOCK_SIZE = 16
    SBOX = [0x76,0x11,0xb8,0xdf,0xdd,0xba,0x13,0x74,0x17,0x70,0xd9,0xbe,0xbc,0xdb,0x72,0x15,0xb4,0xd3,0x7a,0x1d,0x1f,0x78,0xd1,0xb6,0xd5,0xb2,0x1b,0x7c,0x7e,0x19,0xb0,0xd7,0xc5,0xa2,0x0b,0x6c,0x6e,0x09,0xa0,0xc7,0xa4,0xc3,0x6a,0x0d,0x0f,0x68,0xc1,0xa6,0x07,0x60,0xc9,0xae,0xac,0xcb,0x62,0x05,0x66,0x01,0xa8,0xcf,0xcd,0xaa,0x03,0x64,0x27,0x40,0xe9,0x8e,0x8c,0xeb,0x42,0x25,0x46,0x21,0x88,0xef,0xed,0x8a,0x23,0x44,0xe5,0x82,0x2b,0x4c,0x4e,0x29,0x80,0xe7,0x84,0xe3,0x4a,0x2d,0x2f,0x48,0xe1,0x86,0x94,0xf3,0x5a,0x3d,0x3f,0x58,0xf1,0x96,0xf5,0x92,0x3b,0x5c,0x5e,0x39,0x90,0xf7,0x56,0x31,0x98,0xff,0xfd,0x9a,0x33,0x54,0x37,0x50,0xf9,0x9e,0x9c,0xfb,0x52,0x35,0xd4,0xb3,0x1a,0x7d,0x7f,0x18,0xb1,0xd6,0xb5,0xd2,0x7b,0x1c,0x1e,0x79,0xd0,0xb7,0x16,0x71,0xd8,0xbf,0xbd,0xda,0x73,0x14,0x77,0x10,0xb9,0xde,0xdc,0xbb,0x12,0x75,0x67,0x00,0xa9,0xce,0xcc,0xab,0x02,0x65,0x06,0x61,0xc8,0xaf,0xad,0xca,0x63,0x04,0xa5,0xc2,0x6b,0x0c,0x0e,0x69,0xc0,0xa7,0xc4,0xa3,0x0a,0x6d,0x6f,0x08,0xa1,0xc6,0x85,0xe2,0x4b,0x2c,0x2e,0x49,0xe0,0x87,0xe4,0x83,0x2a,0x4d,0x4f,0x28,0x81,0xe6,0x47,0x20,0x89,0xee,0xec,0x8b,0x22,0x45,0x26,0x41,0xe8,0x8f,0x8d,0xea,0x43,0x24,0x36,0x51,0xf8,0x9f,0x9d,0xfa,0x53,0x34,0x57,0x30,0x99,0xfe,0xfc,0x9b,0x32,0x55,0xf4,0x93,0x3a,0x5d,0x5f,0x38,0x91,0xf6,0x95,0xf2,0x5b,0x3c,0x3e,0x59,0xf0,0x97]

    def __init__(self, key: bytes, seed: bytes=None) -> None:
        self.key = key
        self.seed, self.rng = None, None
        if seed: self.st(seed)
    
    def st(self, seed: bytes):
        self.seed, self.rng = seed, random.Random()
        self.rng.seed(seed)
    
    def ed(self):
        self.seed, self.rng = None, None

    def pad(self, msg: bytes) -> bytes:
        if len(msg) % self.BLOCK_SIZE:
            msg += b'\x00' * (self.BLOCK_SIZE - len(msg) % self.BLOCK_SIZE)
        return msg

    def xor(self, a: bytes, b: bytes) -> bytes:
        return bytes([a[i] ^ b[i] for i in range(self.BLOCK_SIZE)])

    def split(self, b: bytes) -> list[int]:
        return list(map(int, bin(b2l(b))[2:].zfill(self.BLOCK_SIZE*8)))

    def unite(self, l: list[int]) -> bytes:
        return l2b(int(''.join(map(str, l)), 2), self.BLOCK_SIZE)
    
    def sub(self, b: bytes) -> bytes:
        return bytes([self.SBOX[b[i]] for i in range(self.BLOCK_SIZE)])
    
    def encrypt_block(self, block: bytes) -> bytes:
        for _ in range(self.ROUNDS - 1):
            block = self.sub(block)
            block = self.split(block); self.rng.shuffle(block); block = self.unite(block)
            block = self.xor(block, self.key)
        block = self.split(block); self.rng.shuffle(block); block = self.unite(block)
        return block
    
    def encrypt(self, msg: bytes) -> bytes:
        assert self.rng
        pt = self.pad(msg)
        ct = b''
        for i in range(0, len(pt), self.BLOCK_SIZE):
            block = pt[i: i + self.BLOCK_SIZE]
            ct += self.encrypt_block(block)
        return ct

def fault(spr: Sparrow, e: bytes):
    from copy import deepcopy
    
    rps = deepcopy(spr)
    rps.key = rps.xor(rps.key, e)
    return rps

def noise(spr: Sparrow, c: bytes):
    c = spr.split(c); random.shuffle(c); c = spr.unite(c)
    return c
