#!/usr/bin/exec-suid -- /usr/bin/python3

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_9 = Integer(9); _sage_const_39 = Integer(39); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_11 = Integer(11); _sage_const_13 = Integer(13); _sage_const_17 = Integer(17); _sage_const_19 = Integer(19); _sage_const_23 = Integer(23); _sage_const_29 = Integer(29); _sage_const_31 = Integer(31); _sage_const_37 = Integer(37); _sage_const_41 = Integer(41); _sage_const_43 = Integer(43); _sage_const_47 = Integer(47); _sage_const_53 = Integer(53); _sage_const_59 = Integer(59); _sage_const_61 = Integer(61); _sage_const_67 = Integer(67); _sage_const_71 = Integer(71); _sage_const_73 = Integer(73); _sage_const_79 = Integer(79); _sage_const_83 = Integer(83); _sage_const_89 = Integer(89); _sage_const_97 = Integer(97); _sage_const_101 = Integer(101); _sage_const_103 = Integer(103); _sage_const_107 = Integer(107); _sage_const_109 = Integer(109); _sage_const_113 = Integer(113); _sage_const_127 = Integer(127); _sage_const_131 = Integer(131); _sage_const_137 = Integer(137); _sage_const_139 = Integer(139); _sage_const_149 = Integer(149); _sage_const_151 = Integer(151); _sage_const_157 = Integer(157); _sage_const_163 = Integer(163); _sage_const_167 = Integer(167); _sage_const_173 = Integer(173); _sage_const_179 = Integer(179); _sage_const_181 = Integer(181); _sage_const_191 = Integer(191); _sage_const_193 = Integer(193); _sage_const_197 = Integer(197); _sage_const_199 = Integer(199); _sage_const_211 = Integer(211); _sage_const_223 = Integer(223); _sage_const_227 = Integer(227); _sage_const_229 = Integer(229); _sage_const_233 = Integer(233); _sage_const_239 = Integer(239); _sage_const_241 = Integer(241); _sage_const_251 = Integer(251); _sage_const_257 = Integer(257); _sage_const_263 = Integer(263); _sage_const_269 = Integer(269); _sage_const_271 = Integer(271); _sage_const_277 = Integer(277); _sage_const_281 = Integer(281); _sage_const_283 = Integer(283); _sage_const_293 = Integer(293); _sage_const_307 = Integer(307); _sage_const_311 = Integer(311); _sage_const_313 = Integer(313); _sage_const_317 = Integer(317); _sage_const_331 = Integer(331); _sage_const_337 = Integer(337); _sage_const_347 = Integer(347); _sage_const_349 = Integer(349); _sage_const_353 = Integer(353); _sage_const_359 = Integer(359); _sage_const_367 = Integer(367); _sage_const_373 = Integer(373); _sage_const_587 = Integer(587); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0)
from Crypto.Util.number import *

from random import randint
import os

from montgomery_isogenies.kummer_line import KummerLine
from montgomery_isogenies.kummer_isogeny import KummerLineIsogeny

#FLAG = os.getenv('FLAG', "SEKAI{here_is_test_flag_hehe}").encode()
FLAG = open("/flag", "r").read().strip()

proof.arithmetic(False)

MI = _sage_const_3 
KU = _sage_const_9 
MIKU = _sage_const_39 

ells = [_sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 , _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 , _sage_const_107 , _sage_const_109 , _sage_const_113 , _sage_const_127 , _sage_const_131 , _sage_const_137 , _sage_const_139 , _sage_const_149 , _sage_const_151 , _sage_const_157 , _sage_const_163 , _sage_const_167 , _sage_const_173 , _sage_const_179 , _sage_const_181 , _sage_const_191 , _sage_const_193 , _sage_const_197 , _sage_const_199 , _sage_const_211 , _sage_const_223 , _sage_const_227 , _sage_const_229 , _sage_const_233 , _sage_const_239 , _sage_const_241 , _sage_const_251 , _sage_const_257 , _sage_const_263 , _sage_const_269 , _sage_const_271 , _sage_const_277 , _sage_const_281 , _sage_const_283 , _sage_const_293 , _sage_const_307 , _sage_const_311 , _sage_const_313 , _sage_const_317 , _sage_const_331 , _sage_const_337 , _sage_const_347 , _sage_const_349 , _sage_const_353 , _sage_const_359 , _sage_const_367 , _sage_const_373 , _sage_const_587 ]
p = _sage_const_4  * prod(ells) - _sage_const_1 

Fp = GF(p)
F = GF(p**_sage_const_2 , modulus=x**_sage_const_2  + _sage_const_1 , names='i')
i = F.gen(_sage_const_0 )
E0 = EllipticCurve(F, [_sage_const_1 , _sage_const_0 ])
E0.set_order((p + _sage_const_1 )**_sage_const_2 )


def group_action(_C, priv, G):
    es = priv[:]
    while any(es):
        x = Fp.random_element()
        P = _C(x)
        A = _C.curve().a2()
        s = _sage_const_1  if Fp(x ** _sage_const_3  + A * x ** _sage_const_2  + x).is_square() else -_sage_const_1 

        S = [i for i, e in enumerate(es) if sign(e) == s and e != _sage_const_0 ]
        k = prod([ells[i] for i in S])
        Q = int((p + _sage_const_1 ) // k) * P
        for i in S:
            R = (k // ells[i]) * Q
            if R.is_zero():
                continue

            phi = KummerLineIsogeny(_C, R, ells[i])
            _C = phi.codomain()
            Q, G = phi(Q), phi(G)
            es[i] -= s
            k //= ells[i]

    return _C, G


def BEAM(base_alice_priv):
    alice_priv = base_alice_priv

    pub = _sage_const_0 

    for _ in range(MIKU):

        E = EllipticCurve(F, [_sage_const_0 , pub, _sage_const_0 , _sage_const_1 , _sage_const_0 ])
        omae_E = KummerLine(E)
        G = E.random_point()
        _G = omae_E(G)

        _final_E1, _final_G = group_action(omae_E, alice_priv, _G)
        _final_G = _final_G
        print(f"final_a2 = {_final_E1.curve().a2()}")
        print(f"{_final_G=}")

        omae_priv = list(map(int, input("your priv >").split(", ")))

        assert all([abs(pi) < _sage_const_2  for pi in omae_priv])
        assert len(omae_priv) == len(ells)

        alice_priv = [ai + yi for ai, yi in zip(alice_priv, omae_priv)]
        print("updated")

        pub = _final_E1.curve().a2()
    print("FIN!")


if __name__ == "__main__":

    print("And now, it's time for the moment you've been waiting for!")

    alice_priv = [randint(MI + KU, MI * KU) for _ in ells]
    BEAM(alice_priv)

    alter_ego = list(map(int, input('ready?! here is the "alter ego" >').split(", ")))

    assert alice_priv != alter_ego
    assert len(alice_priv) == len(alter_ego)
    assert all([-MI * KU <= ai < _sage_const_0  for ai in alter_ego])

    _E0 = KummerLine(E0)
    G = E0.random_point()
    _G = _E0(G)

    _alter_ego_E1, _ = group_action(_E0, alter_ego, _G)
    _alice_E1, __ = group_action(_E0, alice_priv, _G)

    if _alter_ego_E1.curve().a2() == _alice_E1.curve().a2():
        print("There you are... I've been waiting and waiting for you to come to me.")
        print(FLAG)
    else:
        print("YOU CANT FIND MY ALTER EGO....")
        exit()

