/*
 * Copyright (C) 2008-2010 APN, LLC. All rights reserved
 * References to external sources embedded in the code.
 * 
 * Author: Vishal V. Shah
 * Description: Toolbar database/cache/caching module.
 */
var ATB_Cache=function(a){this.dbConn=null;this.cacheGetStatement=null;this.cacheGetRowStatement=null;this.cacheGetAllStatement=null;this.cachePutStatement=null;this.cacheUpdateStatement=null;this.cacheDeleteStatement=null;this.cacheDeleteAllStatement=null;this.timers={};this.init(a)};ATB_Cache.prototype={init:function(f){ATB.Logger.info("Start *Cache* Init...");ATB.Observer.publish(ATB.Observer.Events.DB_CACHE_INIT_START);try{var g=ATB.Utils.getToolbarDatastoreDir();if(!g.exists()){ATB.Logger.info("Datastore folder does NOT exist. Creating a new folder at: ",g.path);this.createDbFolder(g.path)}var e=ATB.Utils.getToolbarDatastoreDir();e.append("cache.sqlite");var d=Components.classes["@mozilla.org/storage/service;1"].getService(Components.interfaces.mozIStorageService);try{this.dbConn=d.openDatabase(e)}catch(b){ATB.Logger.error("Error occured while opening ask toolbar db: ",b);d.backupDatabaseFile(e,e.leafName+".corrupt");if(this.dbConn){try{this.dbConn.close()}catch(a){ATB.Logger.error(a)}}try{e.remove(false);this.dbConn=d.openDatabase(e)}catch(c){ATB.Logger.error(c);return}}this.createCacheTableIfNeeded();this.createCacheStatements();if(typeof(f)=="undefined"||!f){}ATB.Logger.info("Cache initialization complete.")}catch(b){ATB.Logger.error("Error occured while initializing ask toolbar db: ",b)}ATB.Logger.info("End *Cache* Init...");ATB.Observer.publish(ATB.Observer.Events.DB_CACHE_INIT_COMPLETE)},unload:function(){ATB.Logger.info("Start *Cache* Unload...");ATB.Observer.publish(ATB.Observer.Events.DB_CACHE_UNLOAD_START);if(this.dbConn){try{ATB.Logger.info("Finalizing Statements...");this.cacheGetStatement.finalize();this.cacheGetRowStatement.finalize();this.cacheGetAllStatement.finalize();this.cachePutStatement.finalize();this.cacheUpdateStatement.finalize();this.cacheDeleteStatement.finalize();this.cacheDeleteAllStatement.finalize();ATB.Logger.info("Closing database connection...");this.dbConn.close();this.clearTimers();ATB.Logger.info("Done. Cache unload successful.")}catch(a){ATB.Logger.error("Error occured while closing db connection for ask toolbar db: ",a)}finally{ATB.Observer.publish(ATB.Observer.Events.DB_CACHE_UNLOAD_COMPLETE)}}},clearTimers:function(){ATB.Logger.info("Clearing cache refresh timers...");var a=null;for(a in this.timers){ATB.Logger.info("Clearing timer associated with: ",a," with callbackId: ",this.timers[a]);window.clearInterval(this.timers[a])}this.timers={};ATB.Logger.info("All cache refresh timers cleared.")},createDbFolder:function(b){var a=Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);ATB.Logger.info("Creating a new folder for the Ask Toolbar db at: ",b);a.initWithPath(b);a.create(Components.interfaces.nsIFile.DIRECTORY_TYPE,600);ATB.Logger.info("Created datastore folder at: ",b)},createCacheTableIfNeeded:function(a){var c='CREATE TABLE IF NOT EXISTS cache ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "key" TEXT, "value" BLOB, "created" DATETIME DEFAULT CURRENT_TIMESTAMP, "modified" DATETIME DEFAULT CURRENT_TIMESTAMP, "refresh" NUMERIC, "callback" TEXT)';var b="CREATE UNIQUE INDEX IF NOT EXISTS key_index ON cache (key)";ATB.Logger.info("Creating the cache table...");this.executeSimpleSQL(c);ATB.Logger.info("Creating the cache table key index...");this.executeSimpleSQL(b)},createCacheStatements:function(){ATB.Logger.info("Creating cache statements...");this.cacheGetStatement=this.dbConn.createStatement("SELECT value FROM cache WHERE key = ?1");this.cacheGetRowStatement=this.dbConn.createStatement("SELECT * FROM cache WHERE key =?1");this.cacheGetAllStatement=this.dbConn.createStatement("SELECT * FROM cache");this.cachePutStatement=this.dbConn.createStatement("INSERT INTO cache (key, value, created, modified, refresh, callback) VALUES (?1, ?2, ?3, ?4, ?5, ?6)");this.cacheUpdateStatement=this.dbConn.createStatement("UPDATE cache SET value = ?1, modified =?2, refresh = ?3, callback = ?4 WHERE key = ?5");this.cacheDeleteStatement=this.dbConn.createStatement("DELETE FROM cache WHERE key = ?1");this.cacheDeleteAllStatement=this.dbConn.createStatement("DELETE FROM cache")},parseResult:function(c){var a={};try{a.key=c.getString(1);a.value=ATB.Utils.jsonEval(c.getString(2));a.created=c.getDouble(3);a.modified=c.getDouble(4);a.refresh=c.getDouble(5);a.callback=c.getString(6)}catch(b){ATB.Logger.error("parseResult: error while parsing data from sqlite. Error: ",b)}return a},createTimersForExistingEntries:function(){var f=this.getAll();var d=this.getNumResults(f);ATB.Logger.debug('*Got* "',d,'" results from cache.');var a=null;for(a in f){ATB.Logger.debug("createTimersForExistingEntries: Processing cache entry: ",a);if(f.hasOwnProperty(a)){var e=f[a]["refresh"];if(e&&e>0){var c=f[a]["key"];var h=f[a]["callback"];var b=f[a]["modified"];ATB.Logger.debug("Setting refresh interval for key: ",c," and interval: ",e," with last modified: ",b);this.timers[c]=window.setInterval(CacheInitiateCallbackIfMaster,e,h,c);if(b&&b>0){var g=(new Date().getTime()-b)-e;ATB.Logger.info("Identified refreshDelta: ",g);if(g>0){ATB.Logger.info("Calling callback for key: ",c," since the refresh interval is past due. Refresh: ",e," Delta: ",g);CacheInitiateCallbackIfMaster(h,c)}}else{ATB.Logger.info("Entry with key: ",c," does not have a refresh interval specified: ",e)}}}}},executeSimpleSQL:function(b){try{ATB.Logger.debug("Executing simple sql:",b);this.dbConn.executeSimpleSQL(b)}catch(a){ATB.Logger.error("Error while executing sql (",b,"). Error: ",a)}},contains:function(a){return this.get(a)!==null},getValue:function(a){ATB.Logger.debug("*Getting* from cache (using getRowFromCache) - key: ",a);var b=this.get(a);if(b){return b.value}else{ATB.Logger.warn('*Entry associated with the key: "',a,'" does NOT exist in cache.')}return null},get:function(c){ATB.Logger.debug("Getting columns from cache for key: ",c);var a=null;try{this.cacheGetRowStatement.bindStringParameter(0,c);if(this.cacheGetRowStatement.executeStep()){a=this.parseResult(this.cacheGetRowStatement)}}catch(b){ATB.Logger.error("Error while executing cacheGetRowStatement (",this.cacheGetRowStatement,"). Error: ",b)}finally{this.cacheGetRowStatement.reset();ATB.Logger.debug("Get row finished with no database errors.")}return a},getAll:function(){ATB.Logger.debug("*Getting all entries* from cache..");var d={};try{while(this.cacheGetAllStatement.executeStep()){var a=this.parseResult(this.cacheGetAllStatement);d[a.key]=a}}catch(b){ATB.Logger.error("Error while executing cacheGetAllStatement (",this.cacheGetAllStatement,"). Error: ",b)}finally{this.cacheGetAllStatement.reset()}var c=this.getNumResults(d);ATB.Logger.debug('*Got* "',c,'" results from cache.');return d},add:function(d,f,e,g){var c=ATB.Utils.jsonStringify(f);ATB.Logger.debug("*Putting* in cache - key: ",d,"   value: ",c,"   refresh: ",e,"   callback: ",g);this.cachePutStatement.bindStringParameter(0,d);this.cachePutStatement.bindStringParameter(1,c);var b=new Date().getTime();this.cachePutStatement.bindDoubleParameter(2,b);this.cachePutStatement.bindDoubleParameter(3,b);if(typeof(e)=="undefined"||e==null){e=""}if(typeof(g)=="undefined"||g==null){g=""}this.cachePutStatement.bindDoubleParameter(4,e);this.cachePutStatement.bindStringParameter(5,g);this.dbConn.beginTransaction();try{this.cachePutStatement.execute();ATB.Logger.debug("Put successful.");if(e&&g){ATB.Logger.debug("Setting timer for: ",e," with callback: ",g);this.timers[d]=window.setInterval(CacheInitiateCallbackIfMaster,e,g,d);ATB.Logger.debug("Timer set.")}}catch(a){ATB.Logger.error("Error while executing cachePutStatement (",this.cachePutStatement,"). Error: ",a)}finally{this.dbConn.commitTransaction();this.cachePutStatement.reset()}},update:function(d,f,e,g){var c=ATB.Utils.jsonStringify(f);ATB.Logger.debug("*Updating* in cache - key: ",d,"   value (JSON in cache): ",c,"   refresh: ",e,"   callback: ",g);this.cacheUpdateStatement.bindStringParameter(4,d);this.cacheUpdateStatement.bindStringParameter(0,c);var b=new Date().getTime();this.cacheUpdateStatement.bindDoubleParameter(1,b);if(typeof(e)=="undefined"||e==null){e=""}if(typeof(g)=="undefined"||g==null){g=""}this.cacheUpdateStatement.bindDoubleParameter(2,e);this.cacheUpdateStatement.bindStringParameter(3,g);this.dbConn.beginTransaction();try{this.cacheUpdateStatement.execute();ATB.Logger.debug("Update successful.");if(e&&g){ATB.Logger.debug("Clearing timer for key: ",d);window.clearInterval(this.timers[d]);ATB.Logger.debug("Setting *new* timer for: ",e," with callback: ",g);this.timers[d]=window.setInterval(CacheInitiateCallbackIfMaster,e,g,d);ATB.Logger.debug("New timer set.")}}catch(a){ATB.Logger.error("Error while executing cacheUpdateStatement (",this.cacheUpdateStatement,"). Error: ",a)}finally{this.dbConn.commitTransaction();this.cacheUpdateStatement.reset()}},put:function(a,d,b,e){var c=this.get(a);if(c){ATB.Logger.debug("cache put: Key = ",a," already exists in cache, so do a db update");this.update(a,d,b,e)}else{ATB.Logger.debug("cache put: Key = ",a," DOES NOT exist in cache, so do a db put");this.add(a,d,b,e)}},remove:function(b){ATB.Logger.debug("Deleting from cache - key: ",b);this.cacheDeleteStatement.bindStringParameter(0,b);this.dbConn.beginTransaction();try{this.cacheDeleteStatement.execute();ATB.Logger.debug("Delete successful.")}catch(a){ATB.Logger.error("Error while executing cacheDeleteStatement (",this.cacheDeleteStatement,"). Error: ",a)}finally{this.dbConn.commitTransaction();this.cacheDeleteStatement.reset()}},removeAll:function(){ATB.Observer.publish(ATB.Observer.Events.DB_CACHE_PURGE_START);ATB.Logger.debug("Deleting *all entries* from cache...");this.dbConn.beginTransaction();try{this.cacheDeleteAllStatement.execute();ATB.Logger.debug("Delete *all* successful.")}catch(a){ATB.Logger.error("Error while executing cacheDeleteAllStatement (",this.cacheDeleteAllStatement,"). Error: ",a)}finally{this.dbConn.commitTransaction();this.cacheDeleteAllStatement.reset();this.clearTimers();ATB.Observer.publish(ATB.Observer.Events.DB_CACHE_PURGE_COMPLETE)}},getNumResults:function(b){var a=0;if(b){for(k in b){if(b.hasOwnProperty(k)){a++}}}return a}};function CacheInitiateCallbackIfMaster(callback,key){ATB.Logger.info("Cache: Cache: InitiateCallback: callback: ",callback," key: ",key);if(ATB.Core.isMasterToolbar()){var callbackToEval=callback+'("'+key+'")';ATB.Logger.info("InitiateCallback: Master Toolbar... Calling callback (using eval): ",callbackToEval);try{eval(callbackToEval)}catch(error){ATB.Logger.error("Unable to eval callback. Error: ",error)}}else{ATB.Logger.info("InitiateCallback: Current toolbar is not the master. Callback: ",callback," will NOT be called.")}}function CacheTestCallback1(a){ATB.Logger.debug("Callback *1* called for key: ",a,"...")}function CacheTestCallback2(a){ATB.Logger.debug("Callback *2* called for key: ",a,"...")};