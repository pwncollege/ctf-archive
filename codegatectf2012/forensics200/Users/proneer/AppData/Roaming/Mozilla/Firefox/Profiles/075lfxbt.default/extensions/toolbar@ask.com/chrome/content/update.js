/*
 * Copyright (C) 2008-2010 APN, LLC. All rights reserved
 * References to external sources embedded in the code.
 * 
 * Author: Vishal Shah
 * Description: Toolbar Config Update/ Installed Api calls and other init.
 */
var ATB_Update=function(a){this.configUpdateInterval=null;this.isFirstFirefoxLaunchAfterInstallorUpgrade=false;this.overInstallEntry="";this.load(a)};ATB_Update.prototype={load:function(a){ATB.Logger.info("Start *Update* Init...");this.checkForOverInstall();ATB.Logger.info("Loading toolbar preferences...");this.verifyToolbarSystemPrefs(a);this.verifyToolbarUserPrefs();ATB.Core.updateToolbarLayoutPerPreferences();this.setPeriodicIntervalForConfig();ATB.Logger.info("Loading toolbar preferences complete.");ATB.Logger.info("End *Update* Init...");return},checkForOverInstall:function(){var b=this.overInstallEntry=ATB.Utils.getRegistryEntryFromMacroFolderAsStr(ATB.Constants.REG_ENTRY_INSTALLFLOW);ATB.Logger.warn("The registry entry for overinstall flag that was retrieved is :"+b);var d=ATB.Utils.getRegistryEntryFromMacroFolderAsStr("version");if((b===ATB.Constants.INSTALL_FLOW_NEW||b===ATB.Constants.INSTALL_FLOW_UPDATE)&&(d!=ATB.Prefs.getCharPref("oldVersion"))){var f=new Object();var e=ATB.Prefs.PREFS_BRANCH;var a=e.getChildList("",f);for(var c=0;c<a.length;c++){if(e.prefHasUserValue(a[c])){e.clearUserPref(a[c]);ATB.Logger.warn("Reseting the pref : extensions.asktb."+a[c]+" to its default value")}}document.getElementById("asktb").collapsed=false;ATB.Prefs.setCharPref("oldVersion",d)}},clearPeriodicIntervalForConfig:function(){window.clearInterval(this.configUpdateInterval)},setPeriodicIntervalForConfig:function(){var a=ATB.Prefs.getConfigRefreshInterval();ATB.Logger.info("Setting periodic refresh interval handle for config requests: ",a);this.configUpdateInterval=window.setInterval(this.configRefreshInterval,a)},configRefreshInterval:function(){ATB.Logger.info("Periodic interval event occured: Checking for a server update...");ATB.Update.checkForServerUpdate(null);ATB.Logger.info("Server update check complete. Periodic interval process complete.")},checkHomePage:function(){if(ATB.Prefs.isFreshInstall()&&ATB.Prefs.getCobrandId()==""){var b=parseInt(ATB.Prefs.getHPREnabledPref());if(b==1){ATB.Logger.info("Home Page Reset is enabled");var a=ATB.Prefs.getHPRUrlPref();if(a&&a.length>0){ATB.Logger.info("Setting home page to ",a);ATB.Prefs.setHomePagePref(a)}}else{ATB.Logger.info("Home Page Reset is not enabled")}}else{ATB.Logger.info("Home Page doesnt need to be set as this is not the firstLaunch(ever) or an overinstall(UPD) case.")}},verifyToolbarSystemPrefs:function(a){ATB.Logger.info('tb-id: "',ATB.Prefs.getToolbarId(),'"');ATB.Logger.info('logging enabled? : "',ATB.Prefs.isLoggingEnabled(),'"');ATB.Logger.info('tb: "',ATB.Prefs.getToolbarName(),'"');ATB.Logger.info('v: "',ATB.Prefs.getToolbarVersion(),'"');ATB.Logger.info('r: "',ATB.Prefs.getToolbarRevision(),'"');ATB.Logger.info('build: "',ATB.Prefs.getToolbarBuildNumber(),'"');ATB.Logger.info('id: "',ATB.Prefs.getToolbarGuid(),'"');ATB.Logger.info('said: "',ATB.Prefs.getSAGuid(),'"');ATB.Logger.info('o: "',ATB.Prefs.getBarOrigin(),'"');ATB.Logger.info('l: "',ATB.Prefs.getDistributionType(),'"');ATB.Logger.info('qsrc: "',ATB.Prefs.getQSrc(),'"');ATB.Logger.info('locale: "',ATB.Prefs.getToolbarLocale(),'"');ATB.Logger.info('user location (on install): "',ATB.Prefs.getUserLocationOnInstall(),'"');ATB.Logger.info('cbid: "',ATB.Prefs.getCobrandId(),'"');ATB.Logger.info('Using installed uri: "',ATB.Prefs.getInstalledUri(),'"');ATB.Logger.info('Using update uri: "',ATB.Prefs.getUpdateUri(),'"');ATB.Logger.info('Using redirect uri: "',ATB.Prefs.getRedirectUri(),'"');ATB.Logger.info('Using redirect uri for chrome: "',ATB.Prefs.getRedirectUriForChrome(),'"');ATB.Logger.info("Checking if home page needs to be set...");this.checkHomePage();ATB.Logger.info("Verifying/setting last version...");ATB.Logger.info("Verifying cbid...");this.verifyPostInstallPreferences();ATB.Logger.info('Using cobrandId: "',ATB.Prefs.getCobrandId(),'"');ATB.Logger.info("Verifying bar affiliate/origin...");this.verifyBarOriginPref();ATB.Logger.info('Using barOrigin: "',ATB.Prefs.getBarOrigin(),'"');ATB.Logger.info('Using config refresh interval: "',ATB.Prefs.getConfigRefreshInterval(),'"');ATB.Logger.info('Using last-config-request: "',ATB.Prefs.getLastConfigReq(),'"');this.checkForServerUpdate(a)},checkForServerUpdate:function(c){var b=false;if(!ATB.Prefs.isFreshInstall()){var f=0;try{f=Number(ATB.Prefs.getLastConfigReq())}catch(a){ATB.Logger.error("Error fetching last config request pref value: ",a)}var e=new Date().getTime();var d=e-f;ATB.Logger.info("Minutes elapsed since last request: ",Math.floor(d/60000));ATB.Logger.debug("Seconds elapsed since last request: ",Math.floor(d/1000));if(d>=(ATB.Prefs.getConfigRefreshInterval()-1000)){b=true}else{ATB.Logger.info('** Server/Config update will be skipped. Last config call was made "',Math.floor((ATB.Prefs.getConfigRefreshInterval()-d)/60000),'" minutes earlier.')}}else{ATB.Logger.info("** Fresh install detected. Performing the first server/config update..");if(this.overInstallEntry===ATB.Constants.INSTALL_FLOW_SILENT_UPGRADE){ATB.Logger.info("Silent Upgrade detected, since fresh-install flag is true and no install call took place.");ATB.Prefs.setBoolPref(ATB.Constants.ATB_SILENT_UPGRADE_FLAG,true);if(ATB.Prefs.getBoolPref(ATB.Constants.ATB_SILENT_UPGRADE_FROM_PRE_NEWTABS_BUILD).length==0){ATB.Logger.info("silent-upgrade-from-pre-newtabs-build pref is not set, thus this is an upgrade from a pre-newtabs build.");ATB.Prefs.setBoolPref(ATB.Constants.ATB_SILENT_UPGRADE_FROM_PRE_NEWTABS_BUILD,true)}}else{ATB.Prefs.setBoolPref(ATB.Constants.ATB_SILENT_UPGRADE_FROM_PRE_NEWTABS_BUILD,false)}b=true}if(b){this.performServerUpdate(c)}return},performServerUpdate:function(a){var b=false;var d=ATB.Prefs.getUpdateUri();ATB.Logger.info("Contacting the /update API *synchronously* to check version/config updates: ",d);var c=ATB.Net.getResponseXMLFromUrlSynchronously(d);this.processUpdateApiResponse(d,c)},processUpdateApiResponse:function(e,d){if(d){try{var b=ATB.Utils.getStringValueUsingXPathExpr(d,ATB.Constants.XPATH_HTTP_HEADERS_JSON);ATB.Prefs.setCharPref(ATB.Constants.ATB_HTTP_HEADER_WHITELIST_URI,b);ATB.HTTPHeaders.checkForRefresh();ATB.Logger.info("Performing *version* check...");var c=this.performVersionCheck(e,d);if(!c){ATB.Logger.info("Performing *revision* check...");this.performRevisionCheck(e,d)}else{ATB.Logger.info("*** Config update will be SKIPPED since a new version is available for this toolbar!")}if(ATB.Prefs.isSAEnabled()){ATB.Logger.info("processUpdateApiResponse: revision check completed. Updating SA URLs...");this.updateSAUrls();ATB.Logger.info("SA URLs update complete.");ATB.Utils.makeAskDefaultForChromeSearch();this.performSearchSuggestionsCheck(d)}}catch(a){ATB.Logger.error("Error processing /update API response: ",e,".responseXML: ",d,". Error: ",a)}}else{ATB.Logger.error("Server update Process: Could not contact the update API - Response: ",d)}},performVersionCheck:function(d,i){var g=false;ATB.Logger.debug("Checking for a new config version at: ",d);var h=ATB.Prefs.getToolbarVersion();ATB.Logger.debug("Retrieving the server version from the xml response..");var c=ATB.Utils.trim(ATB.Utils.getStringValueUsingXPathExpr(i,ATB.Constants.XPATH_EXPR_UPDATE_VERSION));if(c&&c.length>0&&this.serverVersionGreaterThanCurrent(c,h)){if(this.downloadUpgradeInstaller()){var e=ATB.Utils.getStringValueUsingXPathExpr(i,ATB.Constants.XPATH_EXPR_UPDATE_INSTALL_URL);var a=ATB.Utils.getStringValueUsingXPathExpr(i,ATB.Constants.XPATH_EXPR_UPDATE_INSTALL_PARAMS);ATB.Logger.info('Current version: "',h,'" is less than the server returned version: "',c,'". The upgrade installer will be fetched from: ',e," and will be run using the install params: ",a);try{var b=new Array();b.installParams=a;b.serverVersion=c;ATB.Net.getBinaryResponseTextFromUrlAsynchronously(e,this.performPostDownloadProcess,b);g=true;ATB.Logger.info("Downloading of the installer (version: ",c,") has been started...")}catch(f){ATB.Logger.error("Error iniating the download from the server. Download url: ",e,". Error: ",f)}}else{ATB.Logger.info("Upgrade installer will *not* be downloaded because of certain conditions set(such as a download is already in place). Terminating upgrade process.")}}if(g){ATB.Logger.info("A new toolbar version is downloading, therefore updating the last toolbar version preference to the current version: ",h);ATB.Prefs.setLastToolbarVersion(h)}return g},performRevisionCheck:function(f,l){var b=false;ATB.Logger.debug("*** Checking for a new config revision...");var m=parseInt(ATB.Utils.trim(ATB.Utils.getStringValueUsingXPathExpr(l,ATB.Constants.XPATH_EXPR_UPDATE_REVISION)));ATB.Logger.debug('Retrieved revision using XPath for revision: "',m,'"');if(m){var h=parseInt(ATB.Prefs.getToolbarRevision());ATB.Logger.debug('currentRevision: "',h,'"');if(h<m){b=this.performConfigUpdate(l,h,m);if(b){try{ATB.Logger.info("New Config downloaded, Trying to delete the compatibility.ini file to trigger a Addons-cache rebuild (needed for FF 4 caching issue)");var a=ATB_Utilities.getProfileDirectory();a.append("compatibility.ini");a.remove(false);ATB.Logger.info("Successfully deleted compatibility.ini from the profiles folder")}catch(i){ATB.Logger.warn("Could not delete compatibility.ini file, error:"+i)}}}else{ATB.Logger.info("Config revision up-to-date. A server update will not be initiated.");b=true}if(b){ATB.Prefs.setLastConfigReq(new Date().getTime());ATB.Logger.debug("Done updating to serverRevision: ",m);ATB.Logger.info("Server update process was successful. The last config request timestamp will be updated.");ATB.Prefs.setLastConfigReq(new Date().getTime());ATB.Prefs.setFirstRestartAfterConfigUpdate(true);this.isFirstFirefoxLaunchAfterInstallorUpgrade=true;if(ATB.Prefs.isFreshInstall()){ATB.Logger.info("Success! Fresh install server update process successfully complete. Fresh install pref will be *deactivated*.");ATB.Prefs.setFreshInstall(false);ATB.Logger.info("Trying to detect command line argument (for landing page)... ");try{var g=ATB.Utils.getWindowObjHostingATB().arguments;ATB.Logger.debug("window.arguments: ",g);if(g&&g.length>0){var c=g[0];ATB.Logger.debug("window.arguments[0]: ",c);if(c&&(c instanceof Components.interfaces.nsISupportsArray)){var d="";var k=c.GetElementAt(0).QueryInterface(Components.interfaces.nsISupportsString);ATB.Logger.debug("landingPageUrlElement: ",k);if(k){d=k.data}ATB.Logger.info("Identified passed in landing /success page url. Setting it in the preference system as first launch url: ",d);ATB.Prefs.setFirstLaunchUrl(d)}}ATB.Prefs.setFirstLaunch(true);ATB.Logger.info("*** RESTARTING FIREFOX to pick up the newly fetched first-time toolbar config...");ATB.Utils.restartFirefox();return}catch(j){ATB.Logger.error("Error retrieving Firefox command line / program arguments. Error: ",j)}}else{ATB.Logger.debug("*** Toolbar overlay reload will *not* be triggered. It's only supported for fresh-installs.")}}else{ATB.Logger.error("Server update process was *unsuccessful* this time. The last config request timestamp will *not* be updated.")}}else{ATB.Logger.error("Unable to retrieve server revision from the xml response.")}return},performSearchSuggestionsCheck:function(d){ATB.Logger.info("Checking for a search suggestion URL update");try{var c=ATB.Prefs.getChromeSearchSuggestionsUrl();ATB.Logger.debug("Retrieving the search suggestion URL from the xml response..");var b=ATB.Utils.trim(ATB.Utils.getStringValueUsingXPathExpr(d,ATB.Constants.XPATH_EXPR_UPDATE_SS_URL));if(b!=c){ATB.Logger.debug("Found a new SS URL for chrome search plugin, replacing it in the local chrome search plugin file. New URL value (OK if empty): ",b);ATB.Prefs.setChromeSearchSuggestionsUrl(b);this.updateChromeSearchPluginFiles("ss")}else{ATB.Logger.debug("Chrome SS URL from server is the same as stored URL. No change will be made.")}}catch(a){ATB.Logger.error("Error updating the Search Suggestions(SS) Url for chrome search plugin,retaining old value. Error: ",a)}},downloadUpgradeInstaller:function(){ATB.Logger.debug("Checking to see whether to download the *available* upgrade installer...");var e=false;var c=ATB.Utils.getRegistryEntry(ATB.Constants.REG_ENTRY_UPDATE_PATH,ATB.Utils.getUpdateRegLocation());if(c!=null&&c.length==0){ATB.Logger.debug("UpdatePath is empty. Download will be activated.");e=true}else{ATB.Logger.debug("UpdatePath is non-empty. However, checking LastError entry.. If it has an error condition identified, download will be activated.");var b=ATB.Utils.getRegistryEntry(ATB.Constants.REG_ENTRY_UPDATE_LAST_ERROR,ATB.Utils.getUpdateRegLocation(),"TYPE_INT");ATB.Logger.debug("Read LastError: ",b,". Type: ",typeof(b));var d=0;if(b!=null&&b.length>0){try{d=parseInt(b);ATB.Logger.debug("Converted LastError field to integer: ",d)}catch(a){ATB.Logger.error('Error converting lastErrorField to an integer. lastErrorField: "',b,'". Resetting it to 0. Error: ',a);d=0}}ATB.Logger.debug('LastError is: "',d,'"');if(d>0&&d<10){ATB.Logger.debug("Download will be activated.");e=true}else{ATB.Logger.debug("Download will *not* be activated.")}}ATB.Logger.debug("Calculated toDownload: ",e);return e},performPostDownloadProcess:function(c,e,d){ATB.Logger.info("Download complete for version: ",d.serverVersion,"! Writing binary installer file fetched from the server to the file system...");try{var a=ATB.Utils.getFileHandleUnderInstallLocation("/chrome/temp/askToolbar.exe").path;ATB.Utils.writeContentsToLocalFile(e,a,false);ATB.Logger.debug("Writing the file location to the registry at: ",ATB.Utils.getUpdateRegLocation());ATB.Utils.writeRegistryEntry(ATB.Constants.REG_ENTRY_UPDATE_PATH,a,ATB.Utils.getUpdateRegLocation());ATB.Utils.writeRegistryEntry("Params",d.installParams,ATB.Utils.getUpdateRegLocation());ATB.Logger.info("Done writing to the registry and file system.")}catch(b){ATB.Logger.error("Error writing the binary installer file fetched from the server to the file system: ",b)}return},performConfigUpdate:function(f,g,a){var e=false;ATB.Logger.info('Current revision: "',g,'" is less than the server returned revision: "',a,'". A server update will be initiated');ATB.Observer.publish(ATB.Observer.Events.CONFIG_UPDATE_START);var c=ATB.Utils.getStringValueUsingXPathExpr(f,"/config/ff/configUri");ATB.Logger.debug("Using configUri: ",c);try{var d=this.updateAction(c);if(d){ATB.Logger.info("Update complete. Updating currentRevision from ",g," to ",a);ATB.Prefs.setCharPref("r",a.toString());try{ATB.Locale.validateToolbarLocale();if(ATB.Cache){ATB.Cache.removeAll()}}catch(b){ATB.Logger.error("Error during post-config download processing (while deleting *all* cache entries, etc ...) ",b)}e=true;ATB.Prefs.setBoolPref(ATB.Constants.ATB_CONFIG_UPDATE_FLAG,true)}else{ATB.Logger.error("Dynamic server update action was unsuccessful.");return e}}catch(b){ATB.Logger.error("Error running dynamic server update using configUri: ",c,". server update action will be terminated. Error: ",b);return e}finally{ATB.Observer.publish(ATB.Observer.Events.CONFIG_UPDATE_COMPLETE,{success:e})}return e},serverVersionGreaterThanCurrent:function(b,a){ATB.Logger.debug("Comparing serverVersion (",b,") and currentVersion (",a,")");var c=Components.classes["@mozilla.org/xpcom/version-comparator;1"].getService(Components.interfaces.nsIVersionComparator).compare(b,a);if(c>0){ATB.Logger.debug("serverVersion is > currentVersion");return true}else{ATB.Logger.debug("serverVersion is <= currentVersion");return false}},verifyToolbarUserPrefs:function(){ATB.Core.resetDefaultChannel();ATB.Logger.info('Using default search channel: "',ATB.Prefs.getDefaultChannel(),'"')},verifyPostInstallPreferences:function(){var b=ATB.Prefs.getCobrandId();var c=ATB.Prefs.getDistributionTrackId();var a=ATB.Prefs.getToolbarName();if(!b||!c||!a||b.length==0||c.length==0||a.length==0||b=="-1"){ATB.Logger.warn("Either the cbid/dtid/partner-id is empty in prefs. Will try to look up in Registry.");var d=this.fetchPostInstallPreferences();ATB.Logger.info("Fetching post install preferences complete. Successful? : ",d,'. "cbid" at this time: ',ATB.Prefs.getCobrandId(),', "dtid" at this time: ',ATB.Prefs.getDistributionTrackId(),', "partner-id" at this time: ',ATB.Prefs.getToolbarName())}return},verifyBarOriginPref:function(){var b=ATB.Prefs.getBarOrigin();if(b.length==0||b=="-1"){ATB.Logger.info("The bar origin preference is empty/missing. Fetching it from the server...");var a=this.fetchPostInstallPreferences();ATB.Logger.info("Fetching post install preferences complete. Successful? : ",a,". bar origin at this time: ",ATB.Prefs.getBarOrigin())}return},fetchPostInstallPreferences:function(){var a=ATB.Utils.getRegistryEntryFromMacroFolderAsStr(ATB.Constants.ATB_COBRANDID_PREF);var h=ATB.Utils.getRegistryEntryFromMacroFolderAsStr(ATB.Constants.ATB_BARORIGIN_PREF);var g=ATB.Utils.getRegistryEntryFromMacroFolderAsStr(ATB.Constants.ATB_QSRC_PREF);var c=ATB.Utils.getRegistryEntryFromMacroFolderAsStr(ATB.Constants.ATB_LOCALE_PREF);var e=ATB.Utils.getRegistryEntryFromMacroFolderAsStr(ATB.Constants.ATB_DISTYPE_PREF);if(!a||!h||!g||!c||!e||a.length==0||h.length==0||g.length==0||c.length==0||e.length==0){var d=false;var b=ATB.Prefs.getInstalledUri();ATB.Logger.info("Contacting the /installed API *synchronously* to fetch install time preferences from: ",b);var f=ATB.Net.getResponseXMLFromUrlSynchronously(b);this.processInstalledApiResponse(b,f);d=true}else{this.useRegEntriesForPostInstallPrefs();d=true}if(d){this.updateSAUrls();ATB.Utils.makeAskDefaultForChromeSearch()}return d},processInstalledApiResponse:function(b,h){if(h){try{var a=h.getElementsByTagName("option");var f="";var g="";for(var e=0;e<a.length;e++){if(a[e].hasAttribute("id")){f=a[e].getAttribute("id");g=a[e].hasAttribute("value")?a[e].getAttribute("value"):"";ATB.Logger.debug("Setting preference - ",f,":",g," in prefs and registry");ATB.Prefs.setCharPref(f,g);ATB.Utils.writeRegistryEntryInMacroFolderAsStr(f,g)}}var d=ATB.Prefs.getCharPref(ATB.Constants.ATB_LOCALE_PREF);if(d&&d.length>0){ATB.Logger.debug("Updating locale specific attributes for the locale fetched: ",d);ATB.Locale.updateLocaleLangMappingPropsFile(document);ATB.Locale.updateLocaleSpecificAttributes(null,"asktb")}ATB.Logger.info("fetchPostInstallPreferences: complete. Updating SA Url's...");this.updateSAUrls();ATB.Logger.info("SA Url's update complete.")}catch(c){ATB.Logger.error("Error processing /installed API response: ",b,".responseXML: ",h,". Error: ",c)}}else{ATB.Logger.error("Error retrieving install time preferences from: ",b,".responseXML: ",h)}return},updateAction:function(d){var b=false;ATB.Logger.info("Dynamic server update started.");var j=ATB.Utils.getTimestamp();var f=null;try{f=ATB.Net.getBinaryResponseTextFromUrlSynchronously(d);if(!f||f.length==0){ATB.Logger.error("Empty/Null zip file retrieved from the server. Server update will be terminated.")}else{ATB.Logger.info("Zip file successfully retrieved from the server. Continuing with the server update process..")}}catch(k){ATB.Logger.error("Unable to retrieve the zip file from the server. Server update will be terminated.");return b}var l=ATB.Utils.getFileHandleUnderInstallLocation("/chrome/temp/ff-config."+j+"/ff-config.zip").path;ATB.Logger.info("Writing the in-memory zip contents to: ",l,"...");var o=ATB.Utils.writeContentsToLocalFile(f,l,true);if(o==null){ATB.Logger.error("Unable to write zip file contents to the local file system. Update action will be terminated.");return b}ATB.Logger.info("Downloaded zip file saved to the file system: ",l);ATB.Logger.debug("Constructing a zip reader instance...");var c=Components.classes["@mozilla.org/libjar/zip-reader;1"].createInstance(Components.interfaces.nsIZipReader);ATB.Logger.debug("Zip reader instance constructed: ",c);ATB.Logger.info("Opening the zip file: ",l,"...");var q=ATB.Utils.getBrowserVersion();try{if(q<3){c.init(o)}c.open(o);ATB.Logger.debug("Testing the zip file's validity...");c.test(null);ATB.Logger.info("The zip file is valid.")}catch(k){ATB.Logger.error("Invalid/Corrupt zip file identified. Server update will be terminated. Error: ",k);if(c){c.close()}return b}ATB.Logger.debug("Finding entries in the zip file...");try{var a=c.findEntries("*");if(a!=null){ATB.Logger.info("Found at least one entry in the zip file...");var g=ATB.Utils.getSkinDir();ATB.Logger.info("skin files will be downloaded to: ",g.path);var p=ATB.Utils.getContentDir();ATB.Logger.info("content files will be downloaded to: ",p.path);var h=c.findEntries(null);if(h){ATB.Logger.info("Looping through entries in the downloaded zip file: ",o,".  Only relevant entries from the zip file will be extracted.");while((("hasMoreElements" in h)&&h.hasMoreElements())||(("hasMore" in h)&&h.hasMore())){var n;var m=h.getNext();if(typeof m=="string"){n=c.getEntry(m);n=n.QueryInterface(Components.interfaces.nsIZipEntry)}else{n=m;n=n.QueryInterface(Components.interfaces.nsIZipEntry);m=n.name}ATB.Logger.debug("... ",m);if(/ff-config\/skin\/[^\.].*\.\w+$/.test(m)){var e=m.substring(m.lastIndexOf("/")+1,m.length);var i=g.clone();i.append(e);ATB.Logger.info('**skin/** Extracting file "',e,'" to ',i.path);c.extract(m,i)}else{if(/ff-config\/content\/[^\.].*\.\w+$/.test(m)){var e=m.substring(m.lastIndexOf("/")+1,m.length);var i=p.clone();i.append(e);ATB.Logger.info('**content/** Extracting file "',e,'" to ',i.path);c.extract(m,i)}else{if(m!="ff-config/"){ATB.Logger.warn(m," did not pass the filter - /ff-config/(skin|content)/[^.].*.w,$/ - hence it will NOT be extracted.")}}}}ATB.Logger.debug("Closing nsIZipReader instance: ",c);c.close();ATB.Logger.info("Done extracting all zipped entries.");ATB.Logger.info("Server update successfully complete.");b=true}else{ATB.Logger.error("No entries were located in the downloaded zip file: ",o,". Server update will be terminated.");return b}}}catch(k){ATB.Logger.error("Error working with the downloaded zip file (",l,") using nsIZipReader instance: ",c,". Error: ",k)}finally{if(c){ATB.Logger.debug("Closing nsIZipReader instance: ",c);c.close()}}return b},updateSAUrls:function(){if(ATB.Prefs.isSAEnabled()){ATB.Logger.info("Updating search assist url's... (chrome search plugin, browser.selectedEngine and keyword.URL prefs)");this.updateChromeSearchPluginFiles("sa");ATB.Utils.updateKeywordUrlForSearchAssist()}else{ATB.Logger.debug("Search assist is not enabled. Search plugin files (askcom.xml) *and* keyword.URL pref will not be updated.")}},updateChromeSearchPluginFiles:function(g){ATB.Logger.info("Updating search plugin (chrome) files.. with the latest url macros..");try{var a=ATB.Utils.getFileHandleUnderInstallLocation("/searchplugins/"+ATB.Prefs.getSearchPluginFilename());var e=a.path;ATB.Logger.debug("Identified user profile searchplugins path: ",e);if(g=="sa"){ATB.Utils.updateAskUrlInSearchPlugin(e)}else{if(g=="ss"){ATB.Utils.updateAskSSUrlInSearchPlugin(e)}}}catch(d){ATB.Logger.error("Error updating the ask.com search plugin file in user profile dir: ",d)}try{var h=ATB.Utils.getProfileDirectory();h.append("searchplugins");h.append(ATB.Prefs.getSearchPluginFilename());ffInstallSearchPluginPath=h.path;ATB.Logger.debug("Identified firefox profile => searchplugins path: ",ffInstallSearchPluginPath);if(g=="sa"){ATB.Utils.updateAskUrlInSearchPlugin(ffInstallSearchPluginPath)}else{if(g=="ss"){ATB.Utils.updateAskSSUrlInSearchPlugin(ffInstallSearchPluginPath)}}}catch(d){ATB.Logger.error("Error updating the ask.com search plugin file under firefox profile/searchplugins directory: ",d)}try{ATB.Logger.info("Adding ask.com search engine to Firefox's search engines.");var f=Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);var c=f.newFileURI(a).spec;var b=Components.classes["@mozilla.org/browser/search-service;1"].getService(Components.interfaces.nsIBrowserSearchService);b.addEngine(c,Components.interfaces.nsISearchEngine.DATA_XML,null,false);ATB.Logger.info("Finished updating search plugin (chrome) files with the latest url macros.")}catch(d){ATB.Logger.error("Error adding the ask.com search engine to Firefox's search engines:"+d)}},useRegEntriesForPostInstallPrefs:function(){ATB.Logger.info("**Important:** Install time prefs were already present in the registry. Reusing these values");var c=ATB.Utils.getRegKeyService();c.open(c.ROOT_KEY_LOCAL_MACHINE,ATB.Utils.getMacrosRegLocation(),c.ACCESS_READ);for(var b=0;b<c.valueCount;b++){var d=c.getValueName(b);var a=(c.getValueType(d)==c.TYPE_INT)?c.readIntValue(d):c.readStringValue(d);ATB.Logger.info("Copying ",c.getValueName(b)," = ",c.readStringValue(c.getValueName(b))," (from registry to prefs)");ATB.Prefs.setCharPref(d,a)}c.close();ATB.Logger.debug("Set install prefs from the registry in the ff prefs system.")},setPrefUsingXPath:function(a,e,d,c){ATB.Logger.debug("Querying response XML using XPath expression: ",c);var b=ATB.Utils.getStringValueUsingXPathExpr(d,c);if(b.length>0){ATB.Logger.debug("Retrieved prefValue using XPath for ",a,': "',b,'"');ATB.Prefs.setCharPref(a,b)}else{ATB.Logger.warn("Could not retrieve ",a," from the xml response: ",ATB.Utils.evaluateXPathExprForAStringValue(d,"/"),"Setting it to its default value for this session: ",e);b=e;ATB.Prefs.setCharPref(a,e)}return b}};